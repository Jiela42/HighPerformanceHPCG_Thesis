Striped Box coloring (coloringBox 3x3x3),RTX3090,128x128x128,SymGS
"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description"
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.55",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","106'514",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","55.06",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","55.06",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.05",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.36",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.80",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'126.90",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.89",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.76",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.67",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.97",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.76",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.93",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.9%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","504.80",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.80",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","55.06",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.67",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.74",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.90",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,185,084 sectors to be read from DRAM, which is 1.0x of the 1,184,499 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.98",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.02",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.92",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.51",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.92 active warps per scheduler, but only an average of 0.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","41.73",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","41.91",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.85",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.8% of the total average of 41.7 cycles between issuing two instructions."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.26",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'832'908",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.58",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'613",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128740 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.09",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.72",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'710",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.30",
"0","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967561 excessive sectors (44% of the total 2221362 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.56",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","106'926",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","54.94",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","54.94",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.24",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.97",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.02",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","96'432.51",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.76",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.67",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.52",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.09",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.1%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","504.27",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.02",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","54.94",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.58",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.67",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.86",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,186,459 sectors to be read from DRAM, which is 1.0x of the 1,186,335 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.75",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.25",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.94",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.94 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.33",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.51",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.85",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.3% of the total average of 42.3 cycles between issuing two instructions."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.25",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'832'907",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.57",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'612",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128740 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.75",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.56",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'709",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.30",
"1","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967496 excessive sectors (44% of the total 2221297 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.61",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'086",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","54.33",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","54.33",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","77.98",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.17",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.83",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'533.74",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.01",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.66",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.62",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.97",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.0%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","501.28",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.83",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","54.33",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.33",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.57",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.59",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.56",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.44",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.00",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.00 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.08",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","43.26",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.90",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.0% of the total average of 43.1 cycles between issuing two instructions."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.64",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'394",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.26",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'868",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125749 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.96",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.14",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'619",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.88",
"2","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973661 excessive sectors (44% of the total 2198305 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.52",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'056",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","54.91",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","54.91",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.72",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.22",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","30.27",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'049.78",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.73",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.66",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.79",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.59",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.6%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","501.59",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","30.27",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","54.91",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.66",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.84",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.85",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","19.27",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","80.73",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.15",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.52",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.15 active warps per scheduler, but only an average of 0.52 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.30",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.47",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.01",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.3% of the total average of 42.3 cycles between issuing two instructions."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.59",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'833'017",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.93",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'728",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128751 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.06",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.19",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'715",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.32",
"3","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967696 excessive sectors (44% of the total 2221563 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.48",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","104'451",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","56.11",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","56.11",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","77.12",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.26",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.33",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'770.99",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","31.49",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 18% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.68",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.84",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.69",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.7%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","510.51",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.33",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","56.11",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.55",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.71",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","11.12",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.92",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.08",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.06",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.51",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.06 active warps per scheduler, but only an average of 0.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.57",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.75",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.95",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.0% of the total average of 42.6 cycles between issuing two instructions."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.59",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'833'017",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.91",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'722",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128751 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.81",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.07",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'715",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.32",
"4","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967630 excessive sectors (44% of the total 2221495 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.42",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'796",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.98",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.98",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.06",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.87",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.41",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","96'371.45",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.80",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.73",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.27",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.73",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.32",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.3%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","488.35",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.41",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.98",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.34",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.53",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.52",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.48",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.52",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.01",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.01 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.33",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","43.51",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.01",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.3% of the total average of 43.3 cycles between issuing two instructions."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.95",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'494",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.56",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'968",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125759 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.50",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.44",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'624",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.89",
"5","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973794 excessive sectors (44% of the total 2198500 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.57",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","106'543",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.95",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.95",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","77.92",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.85",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.37",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'941.26",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.16",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.66",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.54",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.83",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.8%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","495.61",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.37",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.95",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.63",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.48",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.65",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,162,279 sectors to be read from DRAM, which is 1.0x of the 1,162,187 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.92",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.08",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.15",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.51",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.15 active warps per scheduler, but only an average of 0.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.08",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","43.26",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.07",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.7% of the total average of 43.1 cycles between issuing two instructions."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.81",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'449",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.44",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'929",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125754 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.11",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.73",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'624",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.89",
"6","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945167 excessive sectors (44% of the total 2169873 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.56",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","108'252",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.22",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.22",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","79.23",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.80",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.28",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'158.71",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.68",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.50",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.75",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.7%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","488.45",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.28",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.22",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.60",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.32",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.48",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,163,027 sectors to be read from DRAM, which is 1.0x of the 1,161,419 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.53",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.47",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.04",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.04 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.39",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","43.58",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.01",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.6% of the total average of 43.4 cycles between issuing two instructions."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.81",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'449",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.42",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'923",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125754 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.90",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.11",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'624",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.89",
"7","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945080 excessive sectors (44% of the total 2169786 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.45",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","106'382",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.56",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.56",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.75",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.96",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.09",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","93'695.54",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.50",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.52",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.48",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","485.91",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.09",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.56",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.25",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.31",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.41",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.47",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.53",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.09",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.09 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.81",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","44.00",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.29",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.07",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.7% of the total average of 43.8 cycles between issuing two instructions."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'279.66",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'667'727",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'353.58",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'691'975",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 122826 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.75",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.04",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'709",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.28",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","58.50",
"8","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951090 excessive sectors (44% of the total 2147308 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.53",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","112'512",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.32",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.32",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.62",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.06",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.49",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102'259.16",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.32",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.48",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.24",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.2%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","478.69",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.49",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.32",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.67",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.54",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.32",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.47",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.53",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.95",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.95 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.54",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.73",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.04",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.3% of the total average of 45.5 cycles between issuing two instructions."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.11",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'124",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.41",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'823",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.84",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.60",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'487",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.62",
"9","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967668 excessive sectors (44% of the total 2221537 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.71",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.39",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","113'666",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.82",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.82",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","81.92",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.87",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.31",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","103'455.56",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.02",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.27",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.87",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.9%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","483.14",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.31",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.82",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.62",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.51",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.21",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.67",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.33",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.99",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.99 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.19",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.38",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.99",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 54.4% of the total average of 45.2 cycles between issuing two instructions."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.11",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'124",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.45",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'836",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.52",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.45",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'487",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.62",
"10","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967675 excessive sectors (44% of the total 2221540 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.56",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","112'567",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.97",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.97",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.43",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.22",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.34",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","100'502.28",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.62",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.53",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.04",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.0%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","476.92",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.34",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.97",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.29",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.47",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.07",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.64",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.36",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.03",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.03 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.53",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.73",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.05",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.2% of the total average of 45.5 cycles between issuing two instructions."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.16",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'502",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.80",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'983",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.98",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.67",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'402",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.33",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.21",
"11","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973792 excessive sectors (44% of the total 2198500 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.51",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","113'969",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.70",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.70",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.90",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.78",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.58",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","104'054.11",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.95",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.68",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.18",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.68",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.7%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","471.73",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.58",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.70",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.71",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.46",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.19",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.34",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.66",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.97",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.16",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.10",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.2% of the total average of 46.0 cycles between issuing two instructions."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.09",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'119",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.41",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'824",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.98",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.67",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'482",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.61",
"12","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967572 excessive sectors (44% of the total 2221373 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.34",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.33",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","113'059",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.13",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.13",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","84.70",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.84",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.95",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","103'745.77",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.18",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.23",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.78",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.8%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","467.38",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.95",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.13",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.61",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.45",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.27",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,189,239 sectors to be read from DRAM, which is 1.0x of the 1,188,816 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.16",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.84",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.05",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.46",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.05 active warps per scheduler, but only an average of 0.46 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.89",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","47.09",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.04",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 25.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 55.3% of the total average of 46.9 cycles between issuing two instructions."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.09",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'118",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.39",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'817",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.72",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.02",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'481",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.60",
"13","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967573 excessive sectors (44% of the total 2221372 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.40",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","112'006",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.18",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.18",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.36",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.93",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.55",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102'389.38",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.77",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.20",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.45",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","471.08",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.55",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.18",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.34",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.37",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.12",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,179,266 sectors to be read from DRAM, which is 1.0x of the 1,178,244 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.14",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.86",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.01",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.46",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.01 active warps per scheduler, but only an average of 0.46 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.74",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.93",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.10",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.2% of the total average of 46.7 cycles between issuing two instructions."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.94",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.13",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"14","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973695 excessive sectors (44% of the total 2198337 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.44",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'382",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.77",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.77",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.62",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.13",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.12",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'376.13",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.93",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.73",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.40",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","468.92",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.12",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.77",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.67",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.18",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.18",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.55",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.45",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.09",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.09 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.10",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.30",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.16",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.4% of the total average of 46.1 cycles between issuing two instructions."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.76",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'970",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.59",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.44",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"15","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945122 excessive sectors (44% of the total 2169828 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.53",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","114'003",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","50.63",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","50.63",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.78",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.81",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.18",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","101'451.85",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.26",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.36",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.74",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.7%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","462.99",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.18",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","50.63",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.61",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.03",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","9.94",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.48",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.52",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.87",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.87 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.02",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.21",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.10",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 54.3% of the total average of 45.0 cycles between issuing two instructions."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.82",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.60",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"16","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945119 excessive sectors (44% of the total 2169825 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.51",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","110'907",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.58",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.58",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","81.60",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.43",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.96",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","96'802.44",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.37",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.94",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.72",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.49",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","470.93",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.96",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.58",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.27",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.15",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","9.98",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.65",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.35",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.00",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.00 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.31",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.50",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.16",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.6% of the total average of 45.3 cycles between issuing two instructions."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.63",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'926",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.63",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.46",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"17","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951090 excessive sectors (44% of the total 2147308 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.47",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","110'894",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.21",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.21",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.02",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.25",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.63",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'337.91",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.05",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.73",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.42",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","474.42",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.63",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.21",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.61",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.68",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.25",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,167,932 sectors to be read from DRAM, which is 1.0x of the 1,166,581 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.96",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.04",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.09",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.49",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.09 active warps per scheduler, but only an average of 0.49 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.05",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.24",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.13",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.5% of the total average of 45.0 cycles between issuing two instructions."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.24",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.28",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"18","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951117 excessive sectors (44% of the total 2183949 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.50",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'521",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.89",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.89",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.18",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.00",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.31",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","100'930.37",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.89",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.45",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.91",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.9%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","473.20",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.31",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.89",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.57",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.43",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.20",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.78",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.22",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.88",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.88 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","44.31",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","44.50",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.07",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 54.0% of the total average of 44.3 cycles between issuing two instructions."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.78",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'977",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.02",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.21",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"19","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951057 excessive sectors (44% of the total 2183889 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.72",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.39",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'625",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.43",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.43",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.42",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.09",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.96",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'703.41",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.19",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 12% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.42",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.55",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","479.75",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.96",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.43",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.31",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.51",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","9.95",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.52",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.48",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.96",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.96 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.44",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.63",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.13",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.5% of the total average of 45.4 cycles between issuing two instructions."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.67",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'939",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","64.75",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.08",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"20","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 957180 excessive sectors (44% of the total 2161336 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.66",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.38",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'713",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.79",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.79",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.99",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.40",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","30.73",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'390.65",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.84",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.90",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.72",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.73",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.7%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","480.05",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","30.73",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.79",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.64",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.55",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.18",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.85",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.15",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.07",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.49",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.07 active warps per scheduler, but only an average of 0.49 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.24",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.43",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.18",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.3% of the total average of 45.2 cycles between issuing two instructions."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.76",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'970",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.46",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.90",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"21","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951117 excessive sectors (44% of the total 2183949 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.47",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'689",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.76",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.76",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.56",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.44",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.39",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'069.70",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.85",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.72",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.96",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.72",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.84",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.8%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","470.58",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.39",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.76",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.58",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.57",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.18",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.63",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.37",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.06",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.06 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.70",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.89",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.13",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.1% of the total average of 45.7 cycles between issuing two instructions."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.56",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.95",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"22","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951057 excessive sectors (44% of the total 2183889 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.36",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'951",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.27",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.27",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.74",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.38",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.23",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","97'771.71",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.11",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 12% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.76",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.17",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.2%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","460.43",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.23",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.27",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.32",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.51",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","9.92",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.38",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.62",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.00",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.00 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.02",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.22",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.19",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.5% of the total average of 46.0 cycles between issuing two instructions."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.63",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'926",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.37",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"23","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 957180 excessive sectors (44% of the total 2161336 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.34",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.33",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'775",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.45",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.45",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.77",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.34",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.03",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","96'486.72",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.20",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.72",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.64",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.00",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.72",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.60",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.6%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","470.23",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.03",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.45",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.67",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.37",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.31",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.05",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.95",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.14",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.49",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.5 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.14 active warps per scheduler, but only an average of 0.49 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.10",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.29",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.24",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.7% of the total average of 45.1 cycles between issuing two instructions."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.65",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'932",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.86",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.10",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"24","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 928965 excessive sectors (44% of the total 2133121 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.43",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","109'320",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.86",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.86",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","81.12",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.22",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.06",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","97'218.09",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.79",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.86",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.35",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","469.57",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.06",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.86",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.54",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.25",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.16",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.73",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.27",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.01",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.01 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.16",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.36",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.19",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.4% of the total average of 45.2 cycles between issuing two instructions."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.63",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'926",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.86",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.09",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"25","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 928968 excessive sectors (44% of the total 2133124 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.40",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","108'423",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.69",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.69",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.77",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.18",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.45",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","96'940.57",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.35",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.66",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.69",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.7%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","466.37",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.45",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.69",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.19",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.36",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.00",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.65",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.35",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.92",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.92 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","44.91",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.10",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.32",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.25",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.7% of the total average of 44.9 cycles between issuing two instructions."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'047.81",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'591'682",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'121.05",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'615'703",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 120393 fused and 37044 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.66",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.51",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","403'751",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.39",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","56.47",
"26","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 934920 excessive sectors (44% of the total 2111067 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.39",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","108'244",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.77",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.77",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.70",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.96",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.49",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'385.23",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.40",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.40",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.22",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.2%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","466.43",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.49",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.77",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.20",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.24",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.02",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.78",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.22",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.00",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.00 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.01",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.21",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.32",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.25",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 54.4% of the total average of 45.0 cycles between issuing two instructions."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'047.81",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'591'682",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'121.05",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'615'703",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 120393 fused and 37044 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.36",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.37",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","403'751",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.39",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","56.47",
"27","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 934920 excessive sectors (44% of the total 2111067 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.54",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","110'069",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.58",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.58",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.74",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.44",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.50",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'839.83",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.59",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.72",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.12",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.72",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.82",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.8%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","472.55",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.50",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.58",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.56",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.22",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.09",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.86",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.14",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.11",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.11 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.39",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.58",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.19",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.8% of the total average of 45.4 cycles between issuing two instructions."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.63",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'926",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.28",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.29",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"28","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 928968 excessive sectors (44% of the total 2133124 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.59",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","108'289",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.22",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.22",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","79.04",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.33",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.17",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","96'528.98",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.06",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.72",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.64",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.99",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.72",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.58",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.6%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","480.82",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.17",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.22",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.62",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.36",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.26",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,143,863 sectors to be read from DRAM, which is 1.0x of the 1,143,430 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.70",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.30",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.83",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.83 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","44.24",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","44.43",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.24",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.9% of the total average of 44.2 cycles between issuing two instructions."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.65",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'932",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.95",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.66",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"29","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 928965 excessive sectors (44% of the total 2133121 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.43",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","110'940",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.66",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.66",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.37",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.07",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.38",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'774.68",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.37",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.40",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.52",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","467.54",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.38",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.66",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.31",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.41",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.01",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.53",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.47",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.02",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.02 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.75",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.94",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.19",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.7% of the total average of 45.7 cycles between issuing two instructions."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.63",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'926",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.60",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.97",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"30","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 957180 excessive sectors (44% of the total 2161336 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.35",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","109'575",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.75",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.75",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","81.98",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.35",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.78",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'639.80",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.40",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.64",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.86",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.65",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.6%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","473.63",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.78",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.75",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.59",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.55",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.38",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.76",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.24",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.04",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.04 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.27",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.46",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.13",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.7% of the total average of 45.3 cycles between issuing two instructions."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.83",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.60",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"31","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951057 excessive sectors (44% of the total 2183889 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.36",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","110'991",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.12",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.12",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.94",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.17",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.57",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'906.44",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.03",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.63",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.23",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.2%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","468.52",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.57",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.12",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.62",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.62",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.25",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.74",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.26",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.10",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.10 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.66",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.86",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.18",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.8% of the total average of 45.7 cycles between issuing two instructions."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.76",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'970",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.61",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.97",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"32","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951117 excessive sectors (44% of the total 2183949 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.26",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.32",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","109'986",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.14",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.14",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.10",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.26",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.12",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'571.61",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.61",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.62",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.91",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.9%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","463.66",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.12",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.14",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.28",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.42",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.10",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,159,363 sectors to be read from DRAM, which is 1.0x of the 1,158,931 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.55",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.45",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.03",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.03 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.75",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.95",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.13",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.8% of the total average of 45.7 cycles between issuing two instructions."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.67",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'939",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.59",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.96",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"33","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 957180 excessive sectors (44% of the total 2161336 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.50",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'819",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.80",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.80",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.37",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.27",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.25",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'173.67",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.82",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.76",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.47",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","472.53",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.25",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.80",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.57",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.49",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.17",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.75",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.25",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.93",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.93 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","44.70",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","44.89",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.07",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.8% of the total average of 44.7 cycles between issuing two instructions."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.78",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'977",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.53",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.42",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"34","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951057 excessive sectors (44% of the total 2183889 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.54",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'176",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.06",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.06",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","81.54",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.34",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.26",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'750.83",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.98",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.84",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.61",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.6%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","476.99",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.26",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.06",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.61",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.77",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.23",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,168,183 sectors to be read from DRAM, which is 1.0x of the 1,167,815 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.53",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.47",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.84",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.84 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","44.70",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","44.89",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.13",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.0% of the total average of 44.7 cycles between issuing two instructions."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.24",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.27",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"35","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951117 excessive sectors (44% of the total 2183949 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.74",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.39",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'413",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.50",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.50",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","80.03",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.24",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.73",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","98'044.41",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.25",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.71",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.71",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.08",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.1%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","481.39",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.73",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.50",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.29",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.14",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","9.94",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.55",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.45",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.01",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.01 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.67",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.86",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.30",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.16",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.9% of the total average of 45.7 cycles between issuing two instructions."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'291.72",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'671'684",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'365.63",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'695'926",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 123266 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.84",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.08",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'486",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.37",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","57.82",
"36","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951090 excessive sectors (44% of the total 2147308 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.54",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","112'889",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.14",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.14",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.82",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.64",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.48",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102'678.22",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.54",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.68",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.16",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.36",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","468.48",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.48",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.14",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.63",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.11",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.04",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.55",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.45",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.10",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.47",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.10 active warps per scheduler, but only an average of 0.47 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.15",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.34",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.10",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.6% of the total average of 46.1 cycles between issuing two instructions."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.59",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.49",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"37","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945119 excessive sectors (44% of the total 2169825 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.40",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'745",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.58",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.58",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.20",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.01",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.99",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","100'241.67",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.83",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.57",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.12",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.1%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","465.34",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.99",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.58",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.68",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.27",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.15",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.65",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.35",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.12",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.12 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.02",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.21",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.16",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.8% of the total average of 46.0 cycles between issuing two instructions."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.76",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'970",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.62",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.98",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"38","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945122 excessive sectors (44% of the total 2169828 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.60",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","114'534",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.12",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.12",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.49",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.71",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.78",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","103'988.30",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.13",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 12% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.67",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.61",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","16.94",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.68",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","30.97",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.0%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","471.21",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.78",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.12",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.36",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.47",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","9.90",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.16",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.84",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.98",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.46",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.98 active warps per scheduler, but only an average of 0.46 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.49",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.69",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.10",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.0% of the total average of 46.5 cycles between issuing two instructions."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.15",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'496",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.74",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'964",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.66",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.52",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'396",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.34",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.20",
"39","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973695 excessive sectors (44% of the total 2198337 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.51",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","114'880",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.30",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.30",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","84.58",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.68",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.98",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","104'863.67",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.71",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.68",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.04",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.68",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","31.44",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (31.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","468.37",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.98",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.30",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.61",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.39",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.10",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","16.85",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","83.15",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.79",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.45",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.79 active warps per scheduler, but only an average of 0.45 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.24",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.44",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.04",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 25.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 54.1% of the total average of 46.2 cycles between issuing two instructions."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.09",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'118",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.39",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'817",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.34",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.84",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'481",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.60",
"40","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967573 excessive sectors (44% of the total 2221372 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.42",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","113'287",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.97",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.97",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","84.19",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.21",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.80",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","101'094.22",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.12",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.68",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.71",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.61",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.6%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","469.93",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.80",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.97",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.72",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.43",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.25",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.22",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.17",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.78",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.96",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.46",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.96 active warps per scheduler, but only an average of 0.46 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","46.20",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.39",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.10",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.2% of the total average of 46.2 cycles between issuing two instructions."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.09",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'119",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.41",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'824",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","68.24",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.75",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'482",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.61",
"41","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967572 excessive sectors (44% of the total 2221373 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.46",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","111'972",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.20",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.20",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","82.88",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.31",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.22",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","99'949.95",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.77",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.62",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.22",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.2%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","473.83",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.22",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.20",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.30",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.43",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.13",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.78",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.22",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.13",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.13 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.71",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.91",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.05",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.1% of the total average of 45.7 cycles between issuing two instructions."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'541.16",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'753'502",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'615.80",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'777'983",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 126204 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.89",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.63",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'402",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.33",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.21",
"42","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973792 excessive sectors (44% of the total 2198500 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.43",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.35",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","112'177",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","52.53",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","52.53",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.26",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.95",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.52",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102'966.87",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.40",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.69",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.63",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.36",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.69",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.02",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.0%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","475.50",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.52",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","52.53",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.61",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.47",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.35",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,188,280 sectors to be read from DRAM, which is 1.0x of the 1,188,124 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.77",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.23",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.13",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.13 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.73",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.93",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.99",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 24.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 53.5% of the total average of 45.7 cycles between issuing two instructions."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.11",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'124",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.45",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'836",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.01",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.68",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'487",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.62",
"43","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967675 excessive sectors (44% of the total 2221540 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.57",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","114'346",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","51.52",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","51.52",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","83.68",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.08",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.40",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102'128.61",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","28.85",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 16% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.62",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","17.50",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","32.28",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (32.3%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","473.15",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.40",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","51.52",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.66",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.56",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.15",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","17.68",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","82.32",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.13",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.48",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.13 active warps per scheduler, but only an average of 0.48 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.98",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","46.18",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.27",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.04",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 23.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.8% of the total average of 46.0 cycles between issuing two instructions."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'796.11",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'837'124",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'871.41",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'861'823",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 129207 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.98",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.67",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'487",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.31",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","60.62",
"44","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967668 excessive sectors (44% of the total 2221537 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.32",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.33",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","105'868",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.78",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.78",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","79.46",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.91",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.26",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","93'974.50",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.65",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.47",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.38",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","481.26",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.26",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.78",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.27",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.35",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.47",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.40",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.60",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.81",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.49",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.81 active warps per scheduler, but only an average of 0.49 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.46",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.64",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.29",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.07",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.9% of the total average of 42.5 cycles between issuing two instructions."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'279.66",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'667'727",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'353.58",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'691'975",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 122826 fused and 37928 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.12",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.74",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","411'709",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.28",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","58.50",
"45","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 951090 excessive sectors (44% of the total 2147308 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.57",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'425",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.52",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.52",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.62",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.88",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.77",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'689.11",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.91",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.59",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.92",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.9%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","491.43",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.77",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.52",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.59",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.36",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.56",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.44",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.56",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.01",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.49",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.01 active warps per scheduler, but only an average of 0.49 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.42",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","43.60",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.01",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.5% of the total average of 43.4 cycles between issuing two instructions."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.81",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'449",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.42",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'923",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125754 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.83",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.08",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'624",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.89",
"46","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945080 excessive sectors (44% of the total 2169786 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.61",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'147",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","53.77",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","53.77",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.05",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.89",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.90",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'683.73",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.99",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.59",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.74",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.92",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.9%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","496.01",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.90",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","53.77",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.64",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.37",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.59",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,162,756 sectors to be read from DRAM, which is 1.0x of the 1,162,487 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.60",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.40",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.88",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.88 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.38",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.56",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.07",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.9% of the total average of 42.4 cycles between issuing two instructions."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.81",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'449",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.44",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'929",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125754 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.25",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.80",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'624",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.89",
"47","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 945167 excessive sectors (44% of the total 2169873 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.35",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.34",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","106'578",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","54.60",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","54.60",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","79.74",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.96",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.73",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'826.74",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.15",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.73",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.66",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.37",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.73",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","33.51",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (33.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","490.12",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.73",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","54.60",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.33",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.54",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.64",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,177,543 sectors to be read from DRAM, which is 1.0x of the 1,177,110 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.35",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.65",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.00",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.49",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.5 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.00 active warps per scheduler, but only an average of 0.49 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.61",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","43.79",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.01",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.4% of the total average of 43.6 cycles between issuing two instructions."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.95",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'494",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.56",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'968",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125759 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.93",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.13",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'624",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.89",
"48","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973794 excessive sectors (44% of the total 2198500 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.64",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.38",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","105'639",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","55.54",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","55.54",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","76.67",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.41",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.34",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","93'842.35",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","31.14",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.76",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.67",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","19.03",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.76",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","35.04",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (35.0%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","513.86",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.34",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","55.54",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.57",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.69",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.99",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,185,740 sectors to be read from DRAM, which is 1.0x of the 1,185,409 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.88",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.12",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.07",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.51",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.07 active warps per scheduler, but only an average of 0.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.72",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.90",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.95",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.0% of the total average of 42.7 cycles between issuing two instructions."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.59",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'833'017",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.91",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'722",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128751 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","67.90",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","32.59",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'715",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.32",
"49","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967630 excessive sectors (44% of the total 2221495 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.52",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","105'762",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","55.52",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","55.52",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","77.73",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.17",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.74",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'254.74",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","31.10",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.67",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.75",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.52",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","507.46",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.74",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","55.52",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.62",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.68",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.98",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,185,703 sectors to be read from DRAM, which is 1.0x of the 1,185,467 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.86",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.14",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","8.04",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.51",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 8.04 active warps per scheduler, but only an average of 0.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.64",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.82",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.01",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.4% of the total average of 42.6 cycles between issuing two instructions."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.59",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'833'017",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.93",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'728",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128751 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.44",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.89",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'715",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.32",
"50","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967696 excessive sectors (44% of the total 2221563 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.52",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.36",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","107'488",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","54.15",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","54.15",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","78.98",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.19",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.95",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","94'417",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","29.89",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 13% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.74",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.64",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.01",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.0%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","495.06",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","31.95",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","54.15",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.35",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.62",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.55",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,176,609 sectors to be read from DRAM, which is 1.0x of the 1,176,471 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.55",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.45",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.89",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.89 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.55",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.73",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.28",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.90",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.9% of the total average of 42.6 cycles between issuing two instructions."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'528.64",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'749'394",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'603.26",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'773'868",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 125749 fused and 38832 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.52",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.93",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","419'619",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.25",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","59.88",
"51","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 973661 excessive sectors (44% of the total 2198305 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.58",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.37",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","106'420",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","55.21",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","55.21",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","77.70",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.18",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.01",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'170.22",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30.91",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.67",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.76",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.55",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.5%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","507.94",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.01",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","55.21",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.57",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.68",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","10.91",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 281.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 1,186,399 sectors to be read from DRAM, which is 1.0x of the 1,185,603 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","18.82",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","81.18",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.95",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.95 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.25",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.43",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.85",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 22.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 52.3% of the total average of 42.3 cycles between issuing two instructions."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.25",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'832'907",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.57",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'612",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128740 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","66.54",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.94",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'709",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.30",
"52","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967496 excessive sectors (44% of the total 2221297 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","9.28",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.33",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","105'259",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Memory Throughput","%","55.71",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","DRAM Throughput","%","55.71",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Duration","usecond","79.36",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.13",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32.08",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","SM Active Cycles","cycle","95'445.37",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","31.25",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 17% of its fp64 peak performance. If Compute Workload Analysis determines that this kernel is fp64 bound, consider using 32-bit precision floating point operations to improve its performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","WRN","The achieved fp64 performance is 14% lower than the fp64 pipeline utilization. Check the Instruction Statistics section to see if using fused instructions can benefit this kernel."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.75",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.68",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issue Slots Busy","%","18.71",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.75",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Compute Workload Analysis","SM Busy","%","34.45",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FP64 is the highest-utilized pipeline (34.4%) based on active cycles, taking into account the rates of its different instructions. It executes 64-bit floating point operations. It is well-utilized, but should not be a bottleneck."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Memory Throughput","Gbyte/second","496.50",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Busy","%","32.08",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Max Bandwidth","%","55.71",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L1/TEX Hit Rate","%","44.69",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Compression Ratio","","0",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","L2 Hit Rate","%","10.72",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Memory Workload Analysis","Mem Pipes Busy","%","11.03",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","One or More Eligible","%","19.14",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Issued Warp Per Scheduler","","0.19",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","No Eligible","%","80.86",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Active Warps Per Scheduler","warp","7.89",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.51",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 7.89 active warps per scheduler, but only an average of 0.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 12. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","41.22",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","41.39",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Active Threads Per Warp","","30.26",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.85",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 21.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 51.7% of the total average of 41.2 cycles between issuing two instructions."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","17'783.26",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Executed Instructions","inst","5'832'908",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","17'858.58",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Instruction Statistics","Issued Instructions","inst","5'857'613",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","InstructionStats","","","","FPInstructions","WRN","This kernel executes 128740 fused and 39756 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 12% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Block Size","","1'024",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Grid Size","","311",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Registers Per Thread","register/thread","47",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Threads","thread","318'464",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Launch Statistics","Waves Per SM","","3.79",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit SM","block","16",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Registers","block","1",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Shared Mem","block","8",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Block Limit Warps","block","1",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Active Warps per SM","warp","32",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Theoretical Occupancy","%","66.67",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Occupancy","%","65.15",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","Achieved Active Warps Per SM","warp","31.27",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (66.7%) is limited by the number of required registers. This kernel's theoretical occupancy (66.7%) is limited by the number of warps within each block. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions Ratio","%","0.07",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Instructions","inst","427'710",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Branch Efficiency","%","92.22",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","Source Counters","Avg. Divergent Branches","","61.30",
"53","3220513","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(311, 1, 1)","0","8.6","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 967561 excessive sectors (44% of the total 2221362 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
