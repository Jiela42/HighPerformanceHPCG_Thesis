Striped Box coloring (coloringBox 4x4x4),A100,32x32x32,SymGS
"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description"
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.24",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.12",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15424",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","13.82",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.54",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.19",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","238.97",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.43",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.12",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.12",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.38",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.17",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.20",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 304.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.23",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.77",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","21.99",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.25",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.2% of the total average of 22.0 cycles between issuing two instructions."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"0","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7371 excessive sectors (48% of the total 15199 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15691",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.34",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.34",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.95",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.19",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.52",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.59",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.59",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.97",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.34",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.00",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.12",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.69",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.31",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.33",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.60",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.6% of the total average of 22.3 cycles between issuing two instructions."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"1","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8596 excessive sectors (52% of the total 16424 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15492",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.33",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.20",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.20",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.63",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.63",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.96",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.86",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.96",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.88",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.12",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.20",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.47",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.2 cycles between issuing two instructions."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"2","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8652 excessive sectors (52% of the total 16480 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.16",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.05",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15151",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.46",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.73",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.20",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.69",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.84",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.84",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.50",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.41",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.03",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.55",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.45",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.41",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.68",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.5% of the total average of 22.4 cycles between issuing two instructions."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"3","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6163 excessive sectors (44% of the total 13993 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15755",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.32",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.32",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.44",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.13",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.62",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.44",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.44",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.67",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.32",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.00",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.53",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 304.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.99",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.01",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.14",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.40",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.2% of the total average of 22.1 cycles between issuing two instructions."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"4","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7391 excessive sectors (49% of the total 15231 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15382",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.91",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.89",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.40",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.40",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.80",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.51",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.26",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 331.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.38",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.62",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.52",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.79",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.4% of the total average of 22.5 cycles between issuing two instructions."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"5","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15532",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.20",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.81",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.41",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.41",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.82",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.91",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.13",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.75",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.25",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.29",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.55",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.8% of the total average of 22.3 cycles between issuing two instructions."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"6","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15493",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.77",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.97",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.68",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.68",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.71",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.65",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.64",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.25",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.7 sectors per request, or 8.7*32 = 279.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.24",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.76",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.61",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.88",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.2% of the total average of 22.6 cycles between issuing two instructions."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"7","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6176 excessive sectors (44% of the total 14016 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15419",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.24",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.71",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.72",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.72",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.75",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.25",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.16",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.81",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.19",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.25",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.51",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.2 cycles between issuing two instructions."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"8","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7392 excessive sectors (49% of the total 15232 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15609",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.64",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","240.35",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.92",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.92",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.82",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.49",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.09",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.81",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.19",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.25",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.51",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.2 cycles between issuing two instructions."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.77",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.85",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"9","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15696",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.18",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.21",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.64",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.64",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.94",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.65",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.32",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.93",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.19",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.81",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.64",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.91",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.6 cycles between issuing two instructions."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"10","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15588",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.34",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.34",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.08",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.07",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.81",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.81",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.99",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.64",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.34",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.59",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.91",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.55",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.45",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.41",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.68",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 45.9% of the total average of 22.4 cycles between issuing two instructions."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"11","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6175 excessive sectors (44% of the total 14017 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.17",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.05",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15375",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.59",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.98",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.79",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.28",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.28",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.38",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.22",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.96",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 305.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.77",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.23",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.28",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.55",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 22.3 cycles between issuing two instructions."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"12","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7404 excessive sectors (49% of the total 15256 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15589",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.14",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.31",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.81",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.13",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.13",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.19",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.36",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.61",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.48",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.52",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.11",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.39",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.3% of the total average of 23.1 cycles between issuing two instructions."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"13","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8628 excessive sectors (52% of the total 16480 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15589",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.33",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.18",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.51",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.51",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.02",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.33",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.51",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.87",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.13",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.21",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.48",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.6% of the total average of 22.2 cycles between issuing two instructions."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"14","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8684 excessive sectors (53% of the total 16536 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15469",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.33",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.20",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.19",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.65",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.65",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.73",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.69",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.61",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.82",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.18",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.25",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.51",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.2 cycles between issuing two instructions."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"15","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6194 excessive sectors (44% of the total 14048 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15734",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.24",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.43",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.26",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.92",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.09",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.09",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.59",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.87",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.67",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.46",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.54",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.12",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.39",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 23.1 cycles between issuing two instructions."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"16","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7554 excessive sectors (48% of the total 15670 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15516",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.11",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.27",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.81",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.53",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.53",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.46",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.09",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.72",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.55",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.45",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.41",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.67",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.35",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.8% of the total average of 22.4 cycles between issuing two instructions."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"17","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15295",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.43",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.43",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.02",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.29",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.31",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.32",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.32",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.74",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.43",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.96",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.80",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.5 sectors per request, or 10.5*32 = 337.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.13",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.87",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.68",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.95",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.35",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.2% of the total average of 22.7 cycles between issuing two instructions."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"18","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15678",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.46",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.64",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.26",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.54",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.86",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.86",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.27",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.78",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.27",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.42",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.58",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.50",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.76",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.35",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.5 cycles between issuing two instructions."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"19","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6459 excessive sectors (44% of the total 14577 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15580",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.51",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.29",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.69",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.12",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.12",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.65",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.71",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.86",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.50",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 308.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.42",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.58",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.15",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.42",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 23.1 cycles between issuing two instructions."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37433",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"20","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7551 excessive sectors (48% of the total 15679 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15546",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.32",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.29",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.47",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.16",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.16",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.68",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.46",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.22",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.82",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.18",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.24",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.50",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.5% of the total average of 22.2 cycles between issuing two instructions."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"21","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15455",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.94",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.31",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.44",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.30",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.30",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.99",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.57",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.84",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.64",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.36",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.01",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.28",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 23.0 cycles between issuing two instructions."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.77",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.85",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"22","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15541",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.09",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.30",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.14",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.06",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.06",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.46",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.03",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.90",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.0 sectors per request, or 9.0*32 = 286.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.92",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.08",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.02",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.02 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.18",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.45",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.7% of the total average of 22.2 cycles between issuing two instructions."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"23","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.23",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.11",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15801",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.23",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.28",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.25",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.04",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.04",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.64",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.77",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.66",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.74",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.7 sectors per request, or 9.7*32 = 310.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.76",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.24",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.92",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.20",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.9 cycles between issuing two instructions."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"24","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15269",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.44",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.44",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.24",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.11",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.32",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.86",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.39",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.39",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.88",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.77",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.44",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.95",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.69",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.37",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.63",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.53",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.80",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.0% of the total average of 22.5 cycles between issuing two instructions."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"25","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15373",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.43",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.43",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.71",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.32",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.78",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.40",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.40",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.62",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.43",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.49",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.50",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.5 sectors per request, or 10.5*32 = 336.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.48",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.52",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.46",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.73",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.0% of the total average of 22.5 cycles between issuing two instructions."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"26","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15228",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.49",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.32",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.09",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.21",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.21",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.45",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.76",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.84",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.28",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.12",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.88",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.69",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.96",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.7 cycles between issuing two instructions."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"27","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.16",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.05",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15404",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.69",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.24",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.26",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.06",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.79",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.79",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.92",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.78",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.70",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.96",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.66",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.34",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.99",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.26",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.4% of the total average of 23.0 cycles between issuing two instructions."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"28","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15543",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.76",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.86",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.82",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.82",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.75",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.94",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.46",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.56",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.44",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.41",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.67",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.8% of the total average of 22.4 cycles between issuing two instructions."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"29","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15490",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.69",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.26",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.14",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.06",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.06",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.69",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.10",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.83",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 339.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.48",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.52",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.45",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.72",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.5 cycles between issuing two instructions."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"30","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15122",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.43",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.43",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.08",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.37",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.28",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.79",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.69",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.69",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.86",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.43",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.73",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.48",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.14",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.86",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.68",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.95",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.2% of the total average of 22.7 cycles between issuing two instructions."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"31","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15598",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.66",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.97",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.94",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.94",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.24",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.80",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.29",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.85",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.15",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.86",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.13",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.2% of the total average of 22.9 cycles between issuing two instructions."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"32","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15604",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.81",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.49",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.43",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.43",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.92",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.12",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.11",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.49",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.51",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.10",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.37",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.36",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 23.1 cycles between issuing two instructions."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"33","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15302",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.43",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.43",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.60",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.10",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.64",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.64",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.86",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.43",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.23",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.77",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.06",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.94",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.73",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.99",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.36",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.7 cycles between issuing two instructions."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"34","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15453",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.55",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.81",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.96",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.96",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.37",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.67",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.90",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.99",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.01",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.78",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.04",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.36",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.2% of the total average of 22.8 cycles between issuing two instructions."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"35","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15760",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.40",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.12",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","252.40",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.36",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.33",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.37",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.33",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.34",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.90",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.23",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 308.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.85",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.15",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.87",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.14",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.5% of the total average of 22.9 cycles between issuing two instructions."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"36","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15415",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.39",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.64",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.85",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.85",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.50",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.47",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.87",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.5 sectors per request, or 10.5*32 = 337.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.21",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.79",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.63",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.90",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.3% of the total average of 22.6 cycles between issuing two instructions."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"37","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15363",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.43",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.43",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.28",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.12",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.64",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.64",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.67",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.43",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.30",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.36",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 339.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.81",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.19",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.89",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.17",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.8% of the total average of 22.9 cycles between issuing two instructions."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"38","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15565",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.56",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.96",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.13",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.65",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.85",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.85",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.13",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.85",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.67",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.91",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.09",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.83",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.10",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.9% of the total average of 22.8 cycles between issuing two instructions."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"39","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15677",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.83",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.44",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.60",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.60",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.35",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.59",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.83",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 308.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.97",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.03",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.78",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.06",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.8 cycles between issuing two instructions."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"40","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15327",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.43",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.43",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.43",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.09",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.41",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.31",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.31",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.61",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.43",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.70",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.87",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 339.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.89",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.11",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.85",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.12",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.2% of the total average of 22.8 cycles between issuing two instructions."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"41","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15438",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.03",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.77",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.83",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.83",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.80",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.26",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.94",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 337.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.03",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.97",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.75",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.02",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.7% of the total average of 22.8 cycles between issuing two instructions."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"42","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15382",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.53",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.34",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.55",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.00",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.00",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.18",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.73",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.45",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","30.26",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.0 sectors per request, or 9.0*32 = 286.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.89",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.11",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.84",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.11",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.8 cycles between issuing two instructions."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"43","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6463 excessive sectors (44% of the total 14591 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15560",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.40",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.13",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.43",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.60",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.60",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.64",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.55",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.97",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.77",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.23",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.92",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.19",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.46",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.4% of the total average of 22.9 cycles between issuing two instructions."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"44","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7547 excessive sectors (48% of the total 15665 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15535",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.99",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.11",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.06",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.06",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.76",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.15",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.58",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 337.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.31",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.69",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.57",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.84",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.9% of the total average of 22.6 cycles between issuing two instructions."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"45","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15437",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.92",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.87",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.39",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.39",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.67",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.82",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.07",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.16",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.84",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.66",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.93",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.1% of the total average of 22.7 cycles between issuing two instructions."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"46","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15488",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.56",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.73",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.37",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.46",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.46",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.09",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.39",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.78",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.81",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.19",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.89",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.16",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.7% of the total average of 22.9 cycles between issuing two instructions."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"47","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6466 excessive sectors (44% of the total 14582 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15593",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.34",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.34",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.41",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.56",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.71",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.71",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.99",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.34",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.74",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.56",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 303.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.93",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.07",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.81",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.08",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.28",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.8 cycles between issuing two instructions."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"48","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7282 excessive sectors (48% of the total 15136 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15375",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.44",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.19",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.64",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.70",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.70",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.15",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.24",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.39",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.48",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.52",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.46",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.72",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.22",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.3% of the total average of 22.5 cycles between issuing two instructions."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"49","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8684 excessive sectors (53% of the total 16536 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15255",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.02",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.55",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.19",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.06",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.50",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.50",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.42",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.18",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.78",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.36",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.64",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.53",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.79",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.22",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.5 cycles between issuing two instructions."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"50","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8628 excessive sectors (52% of the total 16480 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15272",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.71",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.19",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.43",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.88",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.88",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.91",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.32",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.03",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.48",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.52",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.46",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.72",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.22",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.7% of the total average of 22.5 cycles between issuing two instructions."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"51","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6316 excessive sectors (45% of the total 14168 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15220",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.14",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.20",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.21",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.19",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.19",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.01",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.77",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.33",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.37",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 303.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.07",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.93",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.72",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.99",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.7 cycles between issuing two instructions."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"52","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7263 excessive sectors (48% of the total 15105 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15441",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.08",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.08",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.15",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.78",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.78",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.39",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.01",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.43",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.65",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.35",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.35",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.62",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.6% of the total average of 22.4 cycles between issuing two instructions."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"53","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15348",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","13.95",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.77",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.94",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.09",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.09",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.43",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.97",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.28",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.06",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.94",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.73",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.00",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.7 cycles between issuing two instructions."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"54","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15348",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.80",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.88",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.96",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.96",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.65",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.96",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.96",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.86",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.14",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.22",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.49",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.6% of the total average of 22.2 cycles between issuing two instructions."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"55","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6304 excessive sectors (45% of the total 14144 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15688",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.33",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.33",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.24",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.18",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.74",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.98",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.98",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.82",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.33",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.80",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.11",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 304.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.97",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.03",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.79",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.06",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.6% of the total average of 22.8 cycles between issuing two instructions."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"56","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7264 excessive sectors (48% of the total 15104 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15257",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.74",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.51",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.88",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.88",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.11",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.53",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.06",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.33",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.67",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.55",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.81",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.9% of the total average of 22.5 cycles between issuing two instructions."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"57","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.16",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.05",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15123",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.43",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.85",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.23",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.23",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.48",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.48",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.80",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.91",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.20",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 331.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.42",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.58",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.50",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.76",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.5% of the total average of 22.5 cycles between issuing two instructions."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.77",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"58","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15551",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.95",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.19",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.66",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.56",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.56",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.73",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.71",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.78",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.92",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.91",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.09",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.82",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.09",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.3% of the total average of 22.8 cycles between issuing two instructions."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"59","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6303 excessive sectors (45% of the total 14143 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15352",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.76",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.46",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.01",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.01",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.77",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.88",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.54",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.4 sectors per request, or 9.4*32 = 302.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.06",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.94",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.73",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.00",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.32",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.9% of the total average of 22.7 cycles between issuing two instructions."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"60","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7251 excessive sectors (48% of the total 15081 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15376",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.24",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.39",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.31",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.31",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.16",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.73",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.63",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.46",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.53",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.47",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.43",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.69",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.9% of the total average of 22.4 cycles between issuing two instructions."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"61","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8660 excessive sectors (53% of the total 16488 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15417",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.37",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.58",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.87",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.87",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.60",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.59",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.57",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.86",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.14",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.86",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.13",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.6% of the total average of 22.9 cycles between issuing two instructions."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"62","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8604 excessive sectors (52% of the total 16432 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15379",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.05",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.94",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.54",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.29",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.29",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.09",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.64",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.86",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.12",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.50",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.50",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.45",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.72",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.4% of the total average of 22.4 cycles between issuing two instructions."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"63","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6298 excessive sectors (45% of the total 14126 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15045",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.51",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","240.34",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.58",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.43",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.05",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.05",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.86",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.73",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.88",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.97",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.48",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.52",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.46",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.72",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.6% of the total average of 22.5 cycles between issuing two instructions."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.77",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"64","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6298 excessive sectors (45% of the total 14126 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.17",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.05",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15255",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.18",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.43",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.74",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.74",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.63",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.61",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.01",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.31",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.69",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.57",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.83",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.0% of the total average of 22.6 cycles between issuing two instructions."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"65","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8604 excessive sectors (52% of the total 16432 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.17",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","14971",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.07",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.97",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.58",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.23",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.23",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.25",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.64",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.15",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.59",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.41",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.39",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.66",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.3% of the total average of 22.4 cycles between issuing two instructions."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"66","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8660 excessive sectors (53% of the total 16488 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15458",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.67",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.50",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.01",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.01",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.72",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.90",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.41",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.4 sectors per request, or 9.4*32 = 302.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.19",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.81",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.64",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.91",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.32",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.6% of the total average of 22.6 cycles between issuing two instructions."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"67","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7251 excessive sectors (48% of the total 15081 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15269",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.54",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.94",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.67",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.67",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.70",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.82",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.71",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.21",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.79",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.63",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.90",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.9% of the total average of 22.6 cycles between issuing two instructions."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"68","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6303 excessive sectors (45% of the total 14143 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15269",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.83",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.10",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.35",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.35",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.05",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.87",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.23",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 331.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.53",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.47",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.42",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.69",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.7% of the total average of 22.4 cycles between issuing two instructions."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"69","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15297",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.58",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.98",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.37",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.37",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.06",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.55",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.00",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.44",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.56",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.49",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.75",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.4% of the total average of 22.5 cycles between issuing two instructions."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.80",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"70","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15418",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.01",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.23",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.44",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.60",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.60",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.70",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.79",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.20",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 304.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.84",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.16",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.88",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.15",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 22.9 cycles between issuing two instructions."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.80",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"71","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7264 excessive sectors (48% of the total 15104 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15445",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.08",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.42",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","240.69",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.00",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.00",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.09",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.84",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.24",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.67",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.33",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.34",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.60",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.2% of the total average of 22.3 cycles between issuing two instructions."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"72","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6304 excessive sectors (45% of the total 14144 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15281",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.05",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.22",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.30",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.47",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.47",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.12",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.74",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.10",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.71",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.16",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.84",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.67",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.94",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.3% of the total average of 22.7 cycles between issuing two instructions."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"73","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15351",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.90",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.23",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.99",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.37",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.37",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.11",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.75",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.02",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","25.61",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.80",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.20",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.25",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.52",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.1% of the total average of 22.3 cycles between issuing two instructions."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"74","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15379",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.01",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.23",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.08",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.93",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.93",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.88",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.43",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","30.66",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 303.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.25",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.75",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.60",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.87",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.1% of the total average of 22.6 cycles between issuing two instructions."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"75","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7263 excessive sectors (48% of the total 15105 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15327",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.18",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.10",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.06",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.06",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.66",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","39.39",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.11",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 282.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.72",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.28",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.31",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.57",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.22",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.8% of the total average of 22.3 cycles between issuing two instructions."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"76","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6316 excessive sectors (45% of the total 14168 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15521",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.23",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.51",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.14",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.14",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.15",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.06",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.57",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.40",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.60",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.50",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.77",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.22",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.8% of the total average of 22.5 cycles between issuing two instructions."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"77","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8628 excessive sectors (52% of the total 16480 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.23",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.11",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15581",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.05",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.94",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.84",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.95",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.95",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.46",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.28",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.45",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.44",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.56",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.48",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.74",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.22",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.3% of the total average of 22.5 cycles between issuing two instructions."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"78","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8684 excessive sectors (53% of the total 16536 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15556",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.14",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.34",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.45",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.59",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.59",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.01",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.74",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","30.62",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 303.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.12",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.88",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.06",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.31",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.28",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.3% of the total average of 22.1 cycles between issuing two instructions."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"79","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7282 excessive sectors (48% of the total 15136 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15705",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.64",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.12",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.31",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.32",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.32",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.41",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.65",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.40",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.97",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.13",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.87",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.69",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.95",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.3% of the total average of 22.7 cycles between issuing two instructions."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"80","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6466 excessive sectors (44% of the total 14582 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15508",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.46",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.54",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.26",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.62",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.62",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.50",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.86",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.32",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.25",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.75",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.60",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.87",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.6 cycles between issuing two instructions."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"81","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15483",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.43",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.29",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.44",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.59",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.59",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.57",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.18",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.01",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 337.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.09",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.91",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.71",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.98",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.7 cycles between issuing two instructions."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"82","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15594",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.14",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.20",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.12",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","251.11",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.36",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.51",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.51",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.72",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.71",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.48",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 308.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.88",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.12",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.84",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.12",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.46",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.9% of the total average of 22.8 cycles between issuing two instructions."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"83","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7547 excessive sectors (48% of the total 15665 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15499",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.43",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.78",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.83",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.54",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.54",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.28",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.49",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.71",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.0 sectors per request, or 9.0*32 = 286.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.49",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.51",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.10",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.38",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.8% of the total average of 23.1 cycles between issuing two instructions."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.80",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"84","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6463 excessive sectors (44% of the total 14591 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15439",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.38",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.18",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.37",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.17",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.17",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.71",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.20",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.16",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.48",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.52",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.46",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.72",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.1% of the total average of 22.5 cycles between issuing two instructions."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"85","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15582",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.69",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.87",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.17",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.06",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.06",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.19",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.63",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.26",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 339.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.54",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.46",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.42",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.69",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.2% of the total average of 22.4 cycles between issuing two instructions."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"86","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15678",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.39",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.73",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.26",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.26",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.37",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.68",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.88",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.7 sectors per request, or 9.7*32 = 308.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.37",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.63",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.53",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.80",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.6% of the total average of 22.5 cycles between issuing two instructions."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"87","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15509",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.11",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.80",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.84",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.68",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.68",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.78",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.87",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.77",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.11",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.89",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.69",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.96",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.2% of the total average of 22.7 cycles between issuing two instructions."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"88","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15642",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.69",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.98",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.08",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.08",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.81",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.40",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.68",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 339.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.39",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.61",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.51",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.78",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.9% of the total average of 22.5 cycles between issuing two instructions."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"89","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15564",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.56",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.70",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.42",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.16",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.16",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.42",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.48",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.85",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.5 sectors per request, or 10.5*32 = 337.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.61",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.39",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.02",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.30",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.2% of the total average of 23.0 cycles between issuing two instructions."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"90","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15624",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.46",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.90",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.13",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.20",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.05",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.05",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.28",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.86",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.20",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 308.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.42",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.58",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.15",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.43",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.8% of the total average of 23.2 cycles between issuing two instructions."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"91","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15349",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.63",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.78",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.96",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.96",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.52",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.66",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.75",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 286.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.85",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.15",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.86",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.13",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.36",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.9 cycles between issuing two instructions."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"92","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15460",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.42",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.25",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.76",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.76",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.77",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.17",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.85",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 339.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.04",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.96",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.74",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.01",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.36",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.0% of the total average of 22.7 cycles between issuing two instructions."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"93","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15671",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.85",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.99",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.36",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.36",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.85",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.97",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.99",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.60",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.40",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.03",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.30",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.36",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.2% of the total average of 23.0 cycles between issuing two instructions."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"94","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15331",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.43",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.43",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","249.34",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.74",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.74",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.32",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.78",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.17",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.95",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.05",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.80",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.07",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.6% of the total average of 22.8 cycles between issuing two instructions."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37424",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"95","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15433",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.11",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.66",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.25",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.24",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.19",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.19",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.76",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.64",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.86",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.17",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.83",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.65",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.92",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.7 cycles between issuing two instructions."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"96","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15627",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.57",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.26",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.90",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.90",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.85",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.03",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.75",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.19",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.81",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.64",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.91",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.4% of the total average of 22.6 cycles between issuing two instructions."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"97","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15475",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.47",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.25",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.70",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.56",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.56",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.81",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.95",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.84",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.93",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.07",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.81",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.08",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.9% of the total average of 22.8 cycles between issuing two instructions."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.80",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"98","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15591",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.24",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.22",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.25",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","248.98",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.80",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.39",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.80",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.57",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.75",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","26.09",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.43",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.34",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.57",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.14",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.42",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.1% of the total average of 23.1 cycles between issuing two instructions."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"99","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15303",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.19",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.31",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.85",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.96",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.96",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.53",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.84",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.08",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.21",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.79",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.63",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.90",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.6 cycles between issuing two instructions."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"100","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15378",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.52",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.32",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.32",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.32",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.32",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.63",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.53",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.44",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.5 sectors per request, or 10.5*32 = 336.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.96",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.04",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.16",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.42",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.2% of the total average of 22.2 cycles between issuing two instructions."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"101","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.18",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15242",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.44",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.44",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.99",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.33",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.43",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.02",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.02",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.71",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.71",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.44",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.02",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","24.96",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.76",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.24",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.93",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.20",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.8% of the total average of 22.9 cycles between issuing two instructions."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"102","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.17",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.06",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15443",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.59",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","26.19",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.31",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.90",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.09",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.09",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.06",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.61",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.34",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.7 sectors per request, or 9.7*32 = 310.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.89",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.11",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.97",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.97 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.84",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.11",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.6% of the total average of 22.8 cycles between issuing two instructions."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"103","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7552 excessive sectors (48% of the total 15680 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15647",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.39",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.39",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.28",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.29",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","247.79",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.38",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.97",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.40",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.97",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.43",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.39",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.98",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","27.95",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.0 sectors per request, or 9.0*32 = 286.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.78",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.22",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.27",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.53",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.1% of the total average of 22.3 cycles between issuing two instructions."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"104","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6464 excessive sectors (44% of the total 14592 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.22",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15511",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.41",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.41",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.11",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.90",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.31",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","246.27",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.18",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.18",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","22.08",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.71",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.41",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.61",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.12",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.4 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.18",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.82",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.65",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.92",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 22.7 cycles between issuing two instructions."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"105","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15214",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.44",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.44",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.18",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.49",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.32",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.24",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.33",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.33",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.98",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.71",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.44",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.52",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.25",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.43",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.57",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.49",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.76",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.15",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.0% of the total average of 22.5 cycles between issuing two instructions."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36992",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37432",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2752",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.31",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"106","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8960 excessive sectors (52% of the total 17088 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15530",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.40",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.40",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.27",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.23",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.29",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.76",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.56",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.56",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.55",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.71",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.40",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.81",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.47",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 308.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.06",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.94",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.73",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.00",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.47",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.7 cycles between issuing two instructions."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.65",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37433",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"107","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7551 excessive sectors (48% of the total 15679 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.24",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.12",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15941",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.24",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.06",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.66",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.54",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.27",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.27",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.60",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.65",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.79",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.36",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.9 sectors per request, or 8.9*32 = 285.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.74",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.26",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.94",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.21",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.35",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 22.9 cycles between issuing two instructions."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"108","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6459 excessive sectors (44% of the total 14577 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15380",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.51",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.29",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","250.67",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.37",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","34.56",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.38",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","34.56",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.56",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.90",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.80",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 337.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","34.61",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","65.39",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.96",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.96 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23.02",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.29",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.35",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 23.0 cycles between issuing two instructions."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"109","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15451",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.42",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.42",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.24",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.92",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.27",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","245.10",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.35",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.35",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.82",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.42",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.12",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","28.80",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.6 sectors per request, or 10.6*32 = 338.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.27",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.73",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.59",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.85",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.35",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 50.3% of the total average of 22.6 cycles between issuing two instructions."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"110","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8956 excessive sectors (52% of the total 17072 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.25",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.12",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15744",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.02",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.55",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.26",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.35",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.45",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.45",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.92",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.81",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","29.69",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.01",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.99",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.76",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23.03",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.14",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.41",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.1% of the total average of 22.8 cycles between issuing two instructions."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.63",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36993",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.63",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37425",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 960 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2753",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","92.25",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.30",
"111","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7554 excessive sectors (48% of the total 15670 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15360",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.08",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.44",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.81",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.71",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.71",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.12",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.68",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.62",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.57",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.43",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.41",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.67",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.0% of the total average of 22.4 cycles between issuing two instructions."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"112","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6194 excessive sectors (44% of the total 14048 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15729",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.19",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.85",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.27",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.27",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.81",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.35",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.60",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.18",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.82",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.02",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.28",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.0 cycles between issuing two instructions."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"113","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8684 excessive sectors (53% of the total 16536 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15390",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.61",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.24",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242.96",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.54",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.54",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.12",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.29",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.70",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.15",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.6 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.13",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.39",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.1 cycles between issuing two instructions."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"114","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8628 excessive sectors (52% of the total 16480 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15453",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.35",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.35",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.30",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","242",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.68",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.68",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.71",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.69",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.35",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.31",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.87",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 305.9 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.57",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.43",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.40",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.67",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.7% of the total average of 22.4 cycles between issuing two instructions."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.34",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36865",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.35",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37305",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 945 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"115","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7404 excessive sectors (49% of the total 15256 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.16",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.05",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15280",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.56",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.30",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","240.24",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.57",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.94",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.94",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.40",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.54",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.25",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.78",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.22",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.27",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.53",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.8% of the total average of 22.3 cycles between issuing two instructions."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"116","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6175 excessive sectors (44% of the total 14017 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15477",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.37",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.19",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.12",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.81",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.81",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.99",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.26",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.03",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 333.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.34",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.66",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.55",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.82",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.3% of the total average of 22.5 cycles between issuing two instructions."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"117","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15506",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.44",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.06",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.81",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.81",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.80",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.48",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.11",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.90",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.10",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.19",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.45",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.2% of the total average of 22.2 cycles between issuing two instructions."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"118","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15335",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.34",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.96",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.47",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.31",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.31",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.70",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.68",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.20",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.20",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.6 sectors per request, or 9.6*32 = 307.1 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.67",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.33",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.34",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.60",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.6% of the total average of 22.3 cycles between issuing two instructions."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.87",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"119","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7392 excessive sectors (49% of the total 15232 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15414",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.21",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","23.41",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","237.82",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.43",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.30",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.45",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.30",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (31.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.86",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.65",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.68",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.05",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.13",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.7 sectors per request, or 8.7*32 = 279.5 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.56",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.44",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.40",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.67",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 11.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.0% of the total average of 22.4 cycles between issuing two instructions."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"120","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6176 excessive sectors (44% of the total 14016 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.23",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.10",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15780",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.34",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.34",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.17",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.15",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.99",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.38",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.38",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.08",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.65",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.34",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.89",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.11",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.0 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.08",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.92",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.08",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.35",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 48.0% of the total average of 22.1 cycles between issuing two instructions."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"121","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8672 excessive sectors (53% of the total 16512 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15445",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.37",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.37",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.40",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.25",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","239.69",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.42",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.02",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.44",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.02",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.84",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.37",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.50",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.03",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 331.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.29",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.71",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.58",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.85",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.27",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.7% of the total average of 22.6 cycles between issuing two instructions."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"122","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8608 excessive sectors (52% of the total 16448 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15545",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.34",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.34",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.34",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.14",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.92",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.25",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.25",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.72",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.34",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.05",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.75",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 304.7 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.40",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.60",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.00",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.00 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.51",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.78",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.11",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.33",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.3% of the total average of 22.5 cycles between issuing two instructions."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.31",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36856",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.33",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37296",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 944 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2760",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.83",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"123","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7391 excessive sectors (49% of the total 15231 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15693",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.33",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.33",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.50",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","22.99",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.16",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","244.98",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.39",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.23",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.41",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.23",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.42",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.64",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.33",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","38.43",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.94",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.12",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.8 sectors per request, or 8.8*32 = 280.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.22",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.78",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.00",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.27",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 46.8% of the total average of 22.0 cycles between issuing two instructions."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.77",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.85",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"124","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 6163 excessive sectors (44% of the total 13993 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.07",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15354",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.38",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.38",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.37",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.21",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","241.93",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.56",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.41",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.68",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.43",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.68",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","21.01",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.38",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","45.89",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.92",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 334.2 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.30",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.35",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.70",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.98",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.98 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.58",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.85",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.0% of the total average of 22.6 cycles between issuing two instructions."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"125","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8652 excessive sectors (52% of the total 16480 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.08",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15604",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.36",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.36",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.43",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","24.91",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.20",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","243.34",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.40",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","35.47",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.42",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","35.47",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.86",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.66",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.36",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","46.00",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.10",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.4 sectors per request, or 10.4*32 = 332.3 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.06",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.94",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.01",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 1.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.10",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.36",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 49.2% of the total average of 22.1 cycles between issuing two instructions."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.79",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"126","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 8596 excessive sectors (52% of the total 16424 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1.09",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","15598",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","1.34",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","1.34",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","14.30",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","25.88",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","1.17",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","236.42",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.55",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","WRN","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and  close to 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.44",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.02",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.51",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.46",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.51",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (31.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","20.70",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.67",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","1.34",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","44.20",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.16",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.14",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 8.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.5 sectors per request, or 9.5*32 = 304.8 bytes of cache data transfers per request. The optimal thread address pattern for 8.0 byte accesses would result in 8.0*32 = 256.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","35.55",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.36",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","64.45",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.97",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.99",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.97 active warps per scheduler, but only an average of 0.99 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","WRN"," The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. Use the Occupancy section to identify what limits this kernel's theoretical occupancy."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22.41",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22.68",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.12",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","27.17",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 10.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory.. This stall type represents about 47.1% of the total average of 22.4 cycles between issuing two instructions."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Cycles) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","85.29",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","36845",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","86.31",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","37285",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","WRN","This kernel executes 943 fused and 256 non-fused FP64 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP64 performance could be increased by up to 11% (relative to its current performance). Check the Source page to identify where this kernel executes FP64 instructions."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1024",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","52",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","8.19",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2048",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","WRN","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 108 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","1",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","8",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","49.78",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","31.86",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy (50.0%) is limited by the number of required registers. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.07",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","2759",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","91.89",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.31",
"127","3189651","run_profiler","127.0.0.1","striped_box_coloring_half_SymGS_kernel(int, long, int, int, int, int, int, int, long, long, int, int, long *, double *, double *, double *)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 7371 excessive sectors (48% of the total 15199 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
